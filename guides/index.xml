<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guides on HomotopyContinuation.jl</title>
    <link>/guides/</link>
    <description>Recent content in Guides on HomotopyContinuation.jl</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/guides/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Get started</title>
      <link>/guides/get-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/get-started/</guid>
      <description>This guide assumes that you have Julia 1.0 installed and running.
If this is not the case follow the instructions at julialang.org. Installation
HomotopyContinuation.jl is available through the Julia package manager by
pkg&amp;gt; add HomotopyContinuation  you can enter the Julia package manager by pressing ] in the REPL.
Basic usage HomotopyContinuation.jl aims at having easy-to-understand top-level commands. For instance, suppose we want to solve the following polynomial system $f=\begin{bmatrix}x^2+2y \\ y^2-2 \end{bmatrix}$</description>
    </item>
    
    <item>
      <title>Solving square systems of polynomial equations</title>
      <link>/guides/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/examples/</guid>
      <description>Solving square systems of polynomial equations The basic idea of homotopy continuation algorithms is explained quickly. Suppose that you have a square system of polynomials $f(x)=(f_1(x_1,\ldots,x_n),\ldots,f_n(x_1,\ldots,x_n)).$ Here, &amp;ldquo;square&amp;rdquo; means that the system should have as many equations as variables. The goal is to find solutions $x\in \mathbb{R}^n$ with $f(x)=0$. For this we need another system of equations, say $g(x)=(g_1(x_1,\ldots,x_n),\ldots,g_n(x_1,\ldots,x_n))$, and a solution $x_0$ with $g(x_0)=0$. The basic algorithm consists in connecting the polynomials $f$ and $g$ by a path and tracking the solution $x_0$ from $g$ to $f$ using Newton&amp;rsquo;s method (Remark: the space of polynomial systems form a vector space, in which the notion of path is well-defined).</description>
    </item>
    
    <item>
      <title>Solutions in projective space</title>
      <link>/guides/projective/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/projective/</guid>
      <description>Solving systems defined in projective space In the guides so far we were computing solutions in $\mathbb{R}^n$ or $\mathbb{C}^n$. In some applications, however, it is required to compute solutions in projective space $\mathbb{RP}^n$ or $\mathbb{CP}^n$ . This space is defined as the space of all lines in $\mathbb{R}^{n+1}$, respectively $\mathbb{C}^{n+1}$, passing through the origin. HomotopyContinuation.jl automatically recognizes systems defined over projective space and adjusts the output. Next, we show an example.</description>
    </item>
    
    <item>
      <title>Custom Homotopies</title>
      <link>/guides/custom-homotopy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/custom-homotopy/</guid>
      <description>Introduction To track solutions from a start system $G$ to the target system $F$ we use by default the straight-line homotopy $H(x,t) := (1-t)F+tG\;.$ But this is in general not the best choice since you usually leave the solution space of your problem. Therefore we support the ability to define arbitrary homotopies where you have the full power of Julia available.
In the following we will illustrate how to setup a custom homotopy on the following example.</description>
    </item>
    
    <item>
      <title>Parameter Homotopies</title>
      <link>/guides/parameter-homotopies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/parameter-homotopies/</guid>
      <description>Parameter Homotopies Consider the situation in which one has to solve a specific instance of a parametrized family of polynomial systems $P = \{f(x_1,\ldots,x_n,a) = (f_1(x_1,\ldots,x_n,a), \ldots, f_n(x_1\ldots,x_n,a)) \mid a \in \mathbb{R}^m\}.$ Often, there is a number $N$, such that a generic member $f\in P$ has exactly $N$ solutions $x\in\mathbb{R}^n$ with $f(x)=0$. This $N$ might be very considerably smaller than the number of solutions of an arbitrary polynomial system not in $P$.</description>
    </item>
    
    <item>
      <title>Overdetermined systems</title>
      <link>/guides/overdetermined-tracking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/overdetermined-tracking/</guid>
      <description>Overdetermined systems A system of polynomial equations $f=(f_1(x_1,\ldots, x_m),\ldots, f_n(x_1,\ldots,x_m))$ is called overdetermined, if it has more equations than variables; i.e., when $n&amp;gt;m$. HomotopyContinuation.jl features Newtons method for overdetermined systems for tracking solutions. We show in an example how it can be used.
Example: the rational normal curve The rational normal curve is a 1-dimensional algebraic variety within the 3-dimensional complex space: $C = \{(x,y,z) \in \mathbb{C}^3 \mid xz-y^2 = 0,\, y-z^2=0, \, x-yz = 0\}.</description>
    </item>
    
  </channel>
</rss>